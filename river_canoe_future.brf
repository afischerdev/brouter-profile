#---model:btools.router.WaterwayModel
---context:global   # following code refers to global config

# https://github.com/afischerdev/brouter-profile/blob/master/river_canoe_future.brf
# needs an update like https://github.com/afischerdev/brouter-profile/tree/master/brouter_one
# with new tags and free values 
#
# port from https://github.com/poutnikl/Brouter-profiles/blob/master/river-poutnik.brf
# V1.0.1 fixed evaluation order for boot=no
# V1.0.2 fixed fish_pass
# V1.0.3 increased canal costfactor
# V1.0.4 use boat=no 

assign   validForFoot             0   # helps to get a time variable, limit is foot speed, not variable
assign   validForBikes            1   # helps to get a time variable
assign   validForCars             0
assign   validForBoat             1   # this is a nice to have, does nothing

# my boat in meter
assign   boat_height              1.0 # %boat_height% | Boat height in Meter | number
assign   shortest_way             1   # %shortest_way% | use the shortest way | boolean

assign   speed_normal             3   # %speed_normal% | Speed in kmh | number

assign   flow_rate                0   # %flow_rate% | Flow on a river in kmh | number

# my boat has max speed
assign   maxSpeed                 6   # km/h (Caution: this is case sensitive internal parameter and different to maxspeed)
                                      # handle with care, this belongs to your local area and your boat

assign portable_boat              1   # %portable_boat% | the boat is portable | boolean

assign   processUnusedTags        1   # lists all (incl. unused) key/value pairs in geojson
assign   showspeed                1   # show speed instead of elevation (geojson)

# Turn instructions settings
assign considerTurnRestrictions     = true
assign turnInstructionMode          = 4     # Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style, 4=comment-style, 5=gpsies-style, 6=orux-style]
assign turnInstructionCatchingRange = 40    # Within this distance (in m) several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts   = false # Set to "false" to avoid generating special turning instructions for roundabouts | boolean

assign carry_cost 300
assign wait_cost  600


assign downhillcost 0
assign downhillcutoff 1.5
assign uphillcost 0
assign uphillcutoff 1.5

assign   notdefined               100000


---context:way   # following code refers to way-tags

assign priorityclassifier 
       if (     waterway=lock                   ) then  1
  else if (     lock=yes                        ) then  1
  else if ( and whitewater=portage_way 
                portable_boat                   ) then  10
  else if ( and waterway=river 
                reversedirection=               ) then  30
  else if (     waterway=canal                  ) then  29
  else if (     waterway=fairway                ) then  29
  else if (     seamark:type=fairway            ) then  29
  else if (     seamark:type=recommended_track  ) then  29
  else if ( and waterway=river  
                reversedirection=yes            ) then  28
  else if ( and boat=yes|permissive|designated
                reversedirection=               ) then  28
  else if ( and boat=yes|permissive|designated
                reversedirection=yes            ) then  27
  else 0
  
assign xxnot_used false

assign not_used
    switch and boat=no canoe=             true
    switch and boat=no canoe=no           true
    switch     boat=private               true
    switch     canoe=no                   true
    switch     access=no                  true
    switch     access=private             true
    switch     disused=yes                true
    switch     disused:waterway=yes       true
    false

assign is_waterway
    switch and not maxheight=
               lesser boat_height v:maxheight           true
    switch     waterway=river|canal|fairway|lock        true
    switch     seamark:type=fairway|recommended_track   true
    switch     waterway=navigation                      true
    switch and boat=yes|permissive|designated 
               intermittent=no                          true
    switch     canoe=yes|designated                     true
    switch     motorboat=yes                            true
    false

assign is_portageway
    switch and whitewater=portage_way portable_boat true 
    switch and canoe=portage portable_boat          true
    false

# speed not used correct
assign maxspeed 
    switch and is_waterway and not_used portable_boat 1
    switch and is_waterway and not_used
                               not portable_boat      notdefined
    switch     is_portageway                          1
    switch and is_waterway lock=yes                   1.1
    switch and waterway=river reversedirection=yes    sub speed_normal flow_rate
    switch     waterway=river                         add speed_normal flow_rate
    switch     is_waterway                            speed_normal
    speed_normal
    

assign turncost 0
#    if portable_boat then 20 
#    else 100



assign initialcost 
         if waterway=riverbank      then ( notdefined )
    else if boat=no|private         then ( if portable_boat then carry_cost else notdefined )
    else if access=no|private       then ( if portable_boat then carry_cost else notdefined )
    else if waterway=weir           then ( if portable_boat then carry_cost else notdefined )
    else if waterway=dam            then ( if portable_boat then multiply 4 carry_cost else notdefined )
    else if waterway=fish_pass      then ( if portable_boat then carry_cost else notdefined )
    else if is_portageway           then ( carry_cost )
    else if waterway=lock|lock_gate then ( if portable_boat then carry_cost else wait_cost )
    else if seamark:type=lock_basin then ( if portable_boat then carry_cost else wait_cost )
    else if lock=yes                then ( if portable_boat then carry_cost else wait_cost )
    else if obstacle=lock           then ( if portable_boat then carry_cost else wait_cost )
    else 0


# when initialcost not work set a factor
assign costfactor 
    switch and is_waterway and  not_used portable_boat  10
    switch is_portageway                                3
    switch lock=yes                                     6
    switch is_waterway                                  1
    switch and portable_boat waterway=weir|dam          10
    switch and portable_boat waterway=tidal_channel     2
    switch     waterway=tidal_channel                   5
    switch and portable_boat route=canoe                1
    notdefined

  

---context:node  # following code refers to node tags


assign initialcost 
    if waterway=weir                               then ( if portable_boat then carry_cost             else notdefined )
    else if boat=no                                then ( if portable_boat then carry_cost             else notdefined )
    else if access=no                              then ( if portable_boat then carry_cost             else notdefined )
    else if whitewater=put_in|egress|put_in;egress then ( if portable_boat then carry_cost             else notdefined )
    else if waterway=waterfall                     then ( if portable_boat then multiply 10 carry_cost else notdefined )
    else if ford=yes                               then ( if portable_boat then 0                      else notdefined )
    else if ford=boat                              then ( 0 )
    else if ford=stepping_stones                   then ( if portable_boat then carry_cost             else notdefined )
    else if waterway=lock_gate|lock                then ( if portable_boat then carry_cost             else wait_cost )
    else 0
